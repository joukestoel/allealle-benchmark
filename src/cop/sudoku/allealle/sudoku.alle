num (nId:id)                = {<n1>..<n9>}
r1 (nId:id)                 = {<n1>..<n3>}
r2 (nId:id)                 = {<n4>..<n6>}
r3 (nId:id)                 = {<n7>..<n9>}
grid (x:id, y:id, val:int) >= {<n4,n1,2>,<n2,n2,8>,<n5,n2,3>,<n8,n2,7>,<n1,n3,3>,<n4,n3,5>,<n6,n3,4>,
                               <n8,n4,2>,<n9,n4,8>,<n1,n5,8>,<n2,n5,3>,<n5,n5,1>,<n2,n6,4>,<n4,n6,7>,<n5,n6,2>,<n7,n6,3>,<n8,n6,5>,<n9,n6,1>,
                               <n2,n7,7>,<n5,n7,5>,<n6,n7,6>,<n9,n7,4>,<n3,n8,3>,<n1,n9,2>,<n3,n9,5>,<n4,n9,4>,<n6,n9,1>,<n7,n9,6>,<n9,n9,3>}
                           <= {<n1,n1,?>..<n9,n9,?>}

∀ g ∈ grid | some (g where val >= 1 && val <= 9)

∀ x ∈ num[nId as x] | let colVals = ((x ⨯ num[nId as y]) ⨝ grid)[val] | some (colVals[count() as nr] where nr = 9)
∀ y ∈ num[nId as y] | let rowVals = ((y ⨯ num[nId as x]) ⨝ grid)[val] | some (rowVals[count() as nr] where nr = 9)

some ((r1[nId as x] ⨯ r1[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r1[nId as x] ⨯ r2[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r1[nId as x] ⨯ r3[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r2[nId as x] ⨯ r1[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r2[nId as x] ⨯ r2[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r2[nId as x] ⨯ r3[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r3[nId as x] ⨯ r1[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r3[nId as x] ⨯ r2[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9
some ((r3[nId as x] ⨯ r3[nId as y]) ⨝ grid)[val][count() as nrOfVals] where nrOfVals = 9

expect: sat, #models = 1